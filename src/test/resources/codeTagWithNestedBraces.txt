'- javadoc
   |- mainDescription
   |  |- TOKEN[type: TEXT, text: This method demonstrates complex usage of the ]
   |  |- inlineTag
   |  |  |- TOKEN[type: JAVADOC_INLINE_TAG_START, text: {@]
   |  |  |- codeInlineTag
   |  |  |  |- TOKEN[type: CODE_LITERAL, text: code]
   |  |  |  |- TOKEN[type: NEWLINE, text: \n]
   |  |  |  |- TOKEN[type: TEXT, text:      Map<String, List<Map<String, Object>>> complexMap = new HashMap<>();]
   |  |  |  |- TOKEN[type: NEWLINE, text: \n]
   |  |  |  |- TOKEN[type: TEXT, text:      complexMap.put("key", Arrays.asList(]
   |  |  |  |- TOKEN[type: NEWLINE, text: \n]
   |  |  |  |- TOKEN[type: TEXT, text:          Map.of("innerKey1", "{value1]
   |  |  |  |- TOKEN[type: TEXT, text: }", "innerKey2", new Object() {]
   |  |  |  |- TOKEN[type: NEWLINE, text: \n]
   |  |  |  |- TOKEN[type: TEXT, text:              @Override]
   |  |  |  |- TOKEN[type: NEWLINE, text: \n]
   |  |  |  |- TOKEN[type: TEXT, text:              public String toString() {]
   |  |  |  |- TOKEN[type: NEWLINE, text: \n]
   |  |  |  |- TOKEN[type: TEXT, text:                  return "Anonymous {Object} with @annotation and special chars like <, >, &";]
   |  |  |  |- TOKEN[type: NEWLINE, text: \n]
   |  |  |  |- TOKEN[type: TEXT, text:              }]
   |  |  |  |- TOKEN[type: NEWLINE, text: \n]
   |  |  |  |- TOKEN[type: TEXT, text:          })]
   |  |  |  |- TOKEN[type: NEWLINE, text: \n]
   |  |  |  |- TOKEN[type: TEXT, text:      );]
   |  |  |  |- TOKEN[type: NEWLINE, text: \n]
   |  |  |  |- TOKEN[type: TEXT, text:      // Note: { not always means new scope! ]
   |  |  |  |- TOKEN[type: TEXT, text: }]
   |  |  |  |- TOKEN[type: NEWLINE, text: \n]
   |  |  |  |- TOKEN[type: TEXT, text:      System.out.println("Literal brace: { and comment brace: ]
   |  |  |  |- TOKEN[type: TEXT, text: }");]
   |  |  |  |- TOKEN[type: NEWLINE, text: \n]
   |  |  |  '- TOKEN[type: TEXT, text:  ]
   |  |  '- TOKEN[type: JAVADOC_INLINE_TAG_END, text: }]
   |  |- TOKEN[type: TEXT, text: }]
   |  |- TOKEN[type: NEWLINE, text: \n]
   |  |- TOKEN[type: TEXT, text: The same example using the common ]
   |  |- inlineTag
   |  |  |- TOKEN[type: JAVADOC_INLINE_TAG_START, text: {@]
   |  |  |- codeInlineTag
   |  |  |  |- TOKEN[type: CODE_LITERAL, text: code]
   |  |  |  '- TOKEN[type: TEXT, text:  <pre>]
   |  |  '- TOKEN[type: JAVADOC_INLINE_TAG_END, text: }]
   |  |- TOKEN[type: TEXT, text:  format:]
   |  |- TOKEN[type: NEWLINE, text: \n]
   |  |- TOKEN[type: NEWLINE, text: \n]
   |  |- htmlElement
   |  |  |- htmlTagStart
   |  |  |  |- TOKEN[type: TAG_OPEN, text: <]
   |  |  |  |- TOKEN[type: TAG_NAME, text: pre]
   |  |  |  '- TOKEN[type: TAG_CLOSE, text: >]
   |  |  |- htmlContent
   |  |  |  |- TOKEN[type: JAVADOC_INLINE_TAG_START, text: {@]
   |  |  |  |- codeInlineTag
   |  |  |  |  |- TOKEN[type: CODE_LITERAL, text: code]
   |  |  |  |  |- TOKEN[type: NEWLINE, text: \n]
   |  |  |  |  |- TOKEN[type: TEXT, text:  Map<String, List<Map<String, Object>>> complexMap = new HashMap<>();]
   |  |  |  |  |- TOKEN[type: NEWLINE, text: \n]
   |  |  |  |  |- TOKEN[type: TEXT, text:  complexMap.put("key", Arrays.asList(]
   |  |  |  |  |- TOKEN[type: NEWLINE, text: \n]
   |  |  |  |  |- TOKEN[type: TEXT, text:      Map.of("innerKey1", "{value1]
   |  |  |  |  |- TOKEN[type: TEXT, text: }", "innerKey2", new Object() {]
   |  |  |  |  |- TOKEN[type: NEWLINE, text: \n]
   |  |  |  |  |- TOKEN[type: TEXT, text:          @Override]
   |  |  |  |  |- TOKEN[type: NEWLINE, text: \n]
   |  |  |  |  |- TOKEN[type: TEXT, text:          public String toString() {]
   |  |  |  |  |- TOKEN[type: NEWLINE, text: \n]
   |  |  |  |  |- TOKEN[type: TEXT, text:              return "Anonymous {Object} with @annotation and special chars like <, >, &";]
   |  |  |  |  |- TOKEN[type: NEWLINE, text: \n]
   |  |  |  |  |- TOKEN[type: TEXT, text:          }]
   |  |  |  |  |- TOKEN[type: NEWLINE, text: \n]
   |  |  |  |  |- TOKEN[type: TEXT, text:      })]
   |  |  |  |  |- TOKEN[type: NEWLINE, text: \n]
   |  |  |  |  |- TOKEN[type: TEXT, text:  ));]
   |  |  |  |  |- TOKEN[type: NEWLINE, text: \n]
   |  |  |  |  |- TOKEN[type: TEXT, text:  // Note: { not always means new scope!]
   |  |  |  |  |- TOKEN[type: TEXT, text: }]
   |  |  |  |  |- TOKEN[type: NEWLINE, text: \n]
   |  |  |  |  |- TOKEN[type: TEXT, text:  System.out.println("Literal brace: { and comment brace: ]
   |  |  |  |  |- TOKEN[type: TEXT, text: }");]
   |  |  |  |  |- TOKEN[type: NEWLINE, text: \n]
   |  |  |  |  '- TOKEN[type: TEXT, text:  ]
   |  |  |  '- TOKEN[type: JAVADOC_INLINE_TAG_END, text: }]
   |  |  '- htmlTagEnd
   |  |     |- TOKEN[type: TAG_OPEN, text: <]
   |  |     |- TOKEN[type: TAG_SLASH, text: /]
   |  |     |- TOKEN[type: TAG_NAME, text: pre]
   |  |     '- TOKEN[type: TAG_CLOSE, text: >]
   |  |- TOKEN[type: NEWLINE, text: \n]
   |  '- TOKEN[type: TEXT, text: Done.]
   '- TOKEN[type: EOF, text: <EOF>]
