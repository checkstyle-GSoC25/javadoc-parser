'- javadoc
   |- mainDescription
   |  |- TOKEN[type: TEXT, text: This method demonstrates complex usage of the , line: 1, column: 3]
   |  |- inlineTag
   |  |  |- TOKEN[type: JAVADOC_INLINE_TAG_START, text: {@, line: 1, column: 49]
   |  |  |- codeInlineTag
   |  |  |  |- TOKEN[type: CODE_LITERAL, text: code, line: 1, column: 51]
   |  |  |  |- TOKEN[type: NEWLINE, text: \n, line: 1, column: 55]
   |  |  |  |- TOKEN[type: TEXT, text:      Map<String, List<Map<String, Object>>> complexMap = new HashMap<>();, line: 2, column: 2]
   |  |  |  |- TOKEN[type: NEWLINE, text: \n, line: 2, column: 75]
   |  |  |  |- TOKEN[type: TEXT, text:      complexMap.put("key", Arrays.asList(, line: 3, column: 2]
   |  |  |  |- TOKEN[type: NEWLINE, text: \n, line: 3, column: 43]
   |  |  |  |- TOKEN[type: TEXT, text:          Map.of("innerKey1", "{value1, line: 4, column: 2]
   |  |  |  |- TOKEN[type: TEXT, text: }", "innerKey2", new Object() {, line: 4, column: 39]
   |  |  |  |- TOKEN[type: NEWLINE, text: \n, line: 4, column: 70]
   |  |  |  |- TOKEN[type: TEXT, text:              @Override, line: 5, column: 2]
   |  |  |  |- TOKEN[type: NEWLINE, text: \n, line: 5, column: 24]
   |  |  |  |- TOKEN[type: TEXT, text:              public String toString() {, line: 6, column: 2]
   |  |  |  |- TOKEN[type: NEWLINE, text: \n, line: 6, column: 41]
   |  |  |  |- TOKEN[type: TEXT, text:                  return "Anonymous {Object} with @annotation and special chars like <, >, &";, line: 7, column: 2]
   |  |  |  |- TOKEN[type: NEWLINE, text: \n, line: 7, column: 95]
   |  |  |  |- TOKEN[type: TEXT, text:              }, line: 8, column: 2]
   |  |  |  |- TOKEN[type: NEWLINE, text: \n, line: 8, column: 16]
   |  |  |  |- TOKEN[type: TEXT, text:          }), line: 9, column: 2]
   |  |  |  |- TOKEN[type: NEWLINE, text: \n, line: 9, column: 13]
   |  |  |  |- TOKEN[type: TEXT, text:      );, line: 10, column: 2]
   |  |  |  |- TOKEN[type: NEWLINE, text: \n, line: 10, column: 9]
   |  |  |  |- TOKEN[type: TEXT, text:      // Note: { not always means new scope! , line: 11, column: 2]
   |  |  |  |- TOKEN[type: TEXT, text: }, line: 11, column: 46]
   |  |  |  |- TOKEN[type: NEWLINE, text: \n, line: 11, column: 47]
   |  |  |  |- TOKEN[type: TEXT, text:      System.out.println("Literal brace: { and comment brace: , line: 12, column: 2]
   |  |  |  |- TOKEN[type: TEXT, text: }");, line: 12, column: 63]
   |  |  |  |- TOKEN[type: NEWLINE, text: \n, line: 12, column: 67]
   |  |  |  '- TOKEN[type: TEXT, text:  , line: 13, column: 2]
   |  |  '- TOKEN[type: JAVADOC_INLINE_TAG_END, text: }, line: 13, column: 3]
   |  |- TOKEN[type: TEXT, text: }, line: 13, column: 4]
   |  |- TOKEN[type: NEWLINE, text: \n, line: 13, column: 5]
   |  |- TOKEN[type: TEXT, text: The same example using the common , line: 14, column: 3]
   |  |- inlineTag
   |  |  |- TOKEN[type: JAVADOC_INLINE_TAG_START, text: {@, line: 14, column: 37]
   |  |  |- codeInlineTag
   |  |  |  |- TOKEN[type: CODE_LITERAL, text: code, line: 14, column: 39]
   |  |  |  '- TOKEN[type: TEXT, text:  <pre>, line: 14, column: 43]
   |  |  '- TOKEN[type: JAVADOC_INLINE_TAG_END, text: }, line: 14, column: 49]
   |  |- TOKEN[type: TEXT, text:  format:, line: 14, column: 50]
   |  |- TOKEN[type: NEWLINE, text: \n, line: 14, column: 58]
   |  |- TOKEN[type: NEWLINE, text: \n, line: 15, column: 2]
   |  |- htmlElement
   |  |  |- htmlTagStart
   |  |  |  |- TOKEN[type: TAG_OPEN, text: <, line: 16, column: 3]
   |  |  |  |- TOKEN[type: TAG_NAME, text: pre, line: 16, column: 4]
   |  |  |  '- TOKEN[type: TAG_CLOSE, text: >, line: 16, column: 7]
   |  |  |- htmlContent
   |  |  |  |- TOKEN[type: JAVADOC_INLINE_TAG_START, text: {@, line: 16, column: 8]
   |  |  |  |- codeInlineTag
   |  |  |  |  |- TOKEN[type: CODE_LITERAL, text: code, line: 16, column: 10]
   |  |  |  |  |- TOKEN[type: NEWLINE, text: \n, line: 16, column: 14]
   |  |  |  |  |- TOKEN[type: TEXT, text:  Map<String, List<Map<String, Object>>> complexMap = new HashMap<>();, line: 17, column: 2]
   |  |  |  |  |- TOKEN[type: NEWLINE, text: \n, line: 17, column: 71]
   |  |  |  |  |- TOKEN[type: TEXT, text:  complexMap.put("key", Arrays.asList(, line: 18, column: 2]
   |  |  |  |  |- TOKEN[type: NEWLINE, text: \n, line: 18, column: 39]
   |  |  |  |  |- TOKEN[type: TEXT, text:      Map.of("innerKey1", "{value1, line: 19, column: 2]
   |  |  |  |  |- TOKEN[type: TEXT, text: }", "innerKey2", new Object() {, line: 19, column: 35]
   |  |  |  |  |- TOKEN[type: NEWLINE, text: \n, line: 19, column: 66]
   |  |  |  |  |- TOKEN[type: TEXT, text:          @Override, line: 20, column: 2]
   |  |  |  |  |- TOKEN[type: NEWLINE, text: \n, line: 20, column: 20]
   |  |  |  |  |- TOKEN[type: TEXT, text:          public String toString() {, line: 21, column: 2]
   |  |  |  |  |- TOKEN[type: NEWLINE, text: \n, line: 21, column: 37]
   |  |  |  |  |- TOKEN[type: TEXT, text:              return "Anonymous {Object} with @annotation and special chars like <, >, &";, line: 22, column: 2]
   |  |  |  |  |- TOKEN[type: NEWLINE, text: \n, line: 22, column: 91]
   |  |  |  |  |- TOKEN[type: TEXT, text:          }, line: 23, column: 2]
   |  |  |  |  |- TOKEN[type: NEWLINE, text: \n, line: 23, column: 12]
   |  |  |  |  |- TOKEN[type: TEXT, text:      }), line: 24, column: 2]
   |  |  |  |  |- TOKEN[type: NEWLINE, text: \n, line: 24, column: 9]
   |  |  |  |  |- TOKEN[type: TEXT, text:  ));, line: 25, column: 2]
   |  |  |  |  |- TOKEN[type: NEWLINE, text: \n, line: 25, column: 6]
   |  |  |  |  |- TOKEN[type: TEXT, text:  // Note: { not always means new scope!, line: 26, column: 2]
   |  |  |  |  |- TOKEN[type: TEXT, text: }, line: 26, column: 41]
   |  |  |  |  |- TOKEN[type: NEWLINE, text: \n, line: 26, column: 42]
   |  |  |  |  |- TOKEN[type: TEXT, text:  System.out.println("Literal brace: { and comment brace: , line: 27, column: 2]
   |  |  |  |  |- TOKEN[type: TEXT, text: }");, line: 27, column: 59]
   |  |  |  |  |- TOKEN[type: NEWLINE, text: \n, line: 27, column: 63]
   |  |  |  |  '- TOKEN[type: TEXT, text:  , line: 28, column: 2]
   |  |  |  '- TOKEN[type: JAVADOC_INLINE_TAG_END, text: }, line: 28, column: 3]
   |  |  '- htmlTagEnd
   |  |     |- TOKEN[type: TAG_OPEN, text: <, line: 28, column: 4]
   |  |     |- TOKEN[type: TAG_SLASH, text: /, line: 28, column: 5]
   |  |     |- TOKEN[type: TAG_NAME, text: pre, line: 28, column: 6]
   |  |     '- TOKEN[type: TAG_CLOSE, text: >, line: 28, column: 9]
   |  |- TOKEN[type: NEWLINE, text: \n, line: 28, column: 10]
   |  '- TOKEN[type: TEXT, text: Done., line: 29, column: 3]
   '- TOKEN[type: EOF, text: <EOF>, line: 29, column: 8]
